2c2
< 
---
> #include <sys/epoll.h>
11a12
> 
14c15
< int setnonblocking( int fd )
---
> int setnonblocking (int fd)
16,19c17,20
<     int old_option = fcntl( fd, F_GETFL );
<     int new_option = old_option | O_NONBLOCK;
<     fcntl( fd, F_SETFL, new_option );
<     return old_option;
---
> 	int old_option = fcntl(fd, F_GETFL);
> 	int new_option = old_option | O_NONBLOCK;
> 	fcntl(fd, F_SETFL, new_option);
> 	return old_option;
22c23
< void addfd( int epollfd, int fd, bool one_shot )
---
> void addfd (int epollfd, int fd, bool one_shot)
24,32c25,34
<     epoll_event event;
<     event.data.fd = fd;
<     event.events = EPOLLIN | EPOLLET ;//| EPOLLRDHUP;
<     if( one_shot )
<     {
<         event.events |= EPOLLONESHOT;
<     }
<     epoll_ctl( epollfd, EPOLL_CTL_ADD, fd, &event );
<     setnonblocking( fd );
---
> 	epoll_event event;
> 	event.data.fd = fd;
> 	event.events = EPOLLIN | EPOLLET ;
> 	if (one_shot)
> 	{
> 		event.events |= EPOLLONESHOT;
> 	}
> 
> 	epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
> 	setnonblocking(fd);
35c37
< void removefd( int epollfd, int fd )
---
> void removefd (int epollfd, int fd)
37,38c39,40
<     epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, 0 );
<     close( fd );
---
> 	epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, 0);
> 	close(fd);
41c43
< void modfd( int epollfd, int fd, int ev )
---
> void modfd (int epollfd, int fd, int ev)
43,46c45,48
<     epoll_event event;
<     event.data.fd = fd;
<     event.events = ev | EPOLLET | EPOLLONESHOT;// | EPOLLRDHUP;
<     epoll_ctl( epollfd, EPOLL_CTL_MOD, fd, &event );
---
> 	epoll_event event;
> 	event.data.fd = fd;
> 	event.events = ev | EPOLLET | EPOLLONESHOT ;
> 	epoll_ctl (epollfd, EPOLL_CTL_MOD, fd, &event);
52c54
< void http_conn::close_conn( bool real_close )
---
> void http_conn::close_conn(bool real_close)
54,73c56,71
<     if( real_close && ( m_sockfd != -1 ) )
<     {
<         //modfd( m_epollfd, m_sockfd, EPOLLIN );
<         removefd( m_epollfd, m_sockfd );
<         m_sockfd = -1;
<         m_user_count--;
<     }
< }
< 
< void http_conn::init( int sockfd, const sockaddr_in& addr )
< {
<     m_sockfd = sockfd;
<     m_address = addr;
<     int error = 0;
<     socklen_t len = sizeof( error );
<     getsockopt( m_sockfd, SOL_SOCKET, SO_ERROR, &error, &len );
<     int reuse = 1;
<     setsockopt( m_sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof( reuse ) );
<     addfd( m_epollfd, sockfd, true );
<     m_user_count++;
---
> 	if (real_close && (m_sockfd != -1))
> 	{
> 		removefd (m_epollfd, m_sockfd);
> 		m_sockfd = -1;
> 		m_user_count--;
> 	}
> }
> 
> void http_conn::init(int sockfd, const sockaddr_in& addr)
> {
> 	m_sockfd = sockfd;
> 	m_address = addr;
> 	int reuse = 1;
> 	setsockopt(m_sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse));
> 	addfd (m_epollfd, sockfd, true);
> 	m_user_count++;
75c73
<     init();
---
> 	init();
80,94c78,90
<     m_check_state = CHECK_STATE_REQUESTLINE;
<     m_linger = false;
< 
<     m_method = GET;
<     m_url = 0;
<     m_version = 0;
<     m_content_length = 0;
<     m_host = 0;
<     m_start_line = 0;
<     m_checked_idx = 0;
<     m_read_idx = 0;
<     m_write_idx = 0;
<     memset( m_read_buf, '\0', READ_BUFFER_SIZE );
<     memset( m_write_buf, '\0', WRITE_BUFFER_SIZE );
<     memset( m_real_file, '\0', FILENAME_LEN );
---
> 	m_check_state = CHECK_STATE_REQUESTLINE;
> 	m_linger = false;
> 	m_method = GET;
> 	m_version = 0;
> 	m_content_length = 0;
> 	m_host = 0;
> 	m_start_line = 0;
> 	m_checked_idx = 0;
> 	m_read_idx = 0;
> 	m_write_idx = 0;
> 	memset(m_read_buf, '\0', READ_BUFFER_SIZE);
> 	memset(m_write_buf, '\0', WRITE_BUFFER_SIZE);
> 	memset(m_real_file, '\0', FILENAME_LEN);
99,130c95,125
<     char temp;
<     for ( ; m_checked_idx < m_read_idx; ++m_checked_idx )
<     {
<         temp = m_read_buf[ m_checked_idx ];
<         if ( temp == '\r' )
<         {
<             if ( ( m_checked_idx + 1 ) == m_read_idx )
<             {
<                 return LINE_OPEN;
<             }
<             else if ( m_read_buf[ m_checked_idx + 1 ] == '\n' )
<             {
<                 m_read_buf[ m_checked_idx++ ] = '\0';
<                 m_read_buf[ m_checked_idx++ ] = '\0';
<                 return LINE_OK;
<             }
< 
<             return LINE_BAD;
<         }
<         else if( temp == '\n' )
<         {
<             if( ( m_checked_idx > 1 ) && ( m_read_buf[ m_checked_idx - 1 ] == '\r' ) )
<             {
<                 m_read_buf[ m_checked_idx-1 ] = '\0';
<                 m_read_buf[ m_checked_idx++ ] = '\0';
<                 return LINE_OK;
<             }
<             return LINE_BAD;
<         }
<     }
< 
<     return LINE_OPEN;
---
> 	char temp;
> 	for (; m_checked_idx < m_read_idx; ++m_checked_idx)
> 	{
> 		temp = m_read_buf[m_checked_idx];
> 		if (temp == '\r')
> 		{
> 			if ((m_checked_idx + 1) == m_read_idx)
> 			{
> 				return LINE_OPEN;
> 			}
> 			else if (m_read_buf[m_checked_idx+1] == '\n')
> 			{
> 				m_read_buf[m_checked_idx++] = '\0';
> 				m_read_buf[m_checked_idx++] = '\0';
> 				return LINE_OK;
> 			}
> 
> 			return LINE_BAD;
> 		}
> 		else if (temp == '\n')
> 		{
> 			if ((m_checked_idx > 1) && (m_read_buf[m_checked_idx -1] == '\r'))
> 			{
> 				m_read_buf[m_checked_idx -1] = '\0';
> 				m_read_buf[m_checked_idx++] = '\0';
> 				return LINE_OK;
> 			}
> 			return LINE_BAD;
> 		}
> 	}
> 	return LINE_OPEN;
132a128
> 
135,264c131,262
<     if( m_read_idx >= READ_BUFFER_SIZE )
<     {
<         return false;
<     }
< 
<     int bytes_read = 0;
<     while( true )
<     {
<         bytes_read = recv( m_sockfd, m_read_buf + m_read_idx, READ_BUFFER_SIZE - m_read_idx, 0 );
<         if ( bytes_read == -1 )
<         {
<             if( errno == EAGAIN || errno == EWOULDBLOCK )
<             {
<                 break;
<             }
<             return false;
<         }
<         else if ( bytes_read == 0 )
<         {
<             return false;
<         }
< 
<         m_read_idx += bytes_read;
<     }
<     return true;
< }
< 
< http_conn::HTTP_CODE http_conn::parse_request_line( char* text )
< {
<     m_url = strpbrk( text, " \t" );
<     if ( ! m_url )
<     {
<         return BAD_REQUEST;
<     }
<     *m_url++ = '\0';
< 
<     char* method = text;
<     if ( strcasecmp( method, "GET" ) == 0 )
<     {
<         m_method = GET;
<     }
<     else
<     {
<         return BAD_REQUEST;
<     }
< 
<     m_url += strspn( m_url, " \t" );
<     m_version = strpbrk( m_url, " \t" );
<     if ( ! m_version )
<     {
<         return BAD_REQUEST;
<     }
<     *m_version++ = '\0';
<     m_version += strspn( m_version, " \t" );
<     if ( strcasecmp( m_version, "HTTP/1.1" ) != 0 )
<     {
<         return BAD_REQUEST;
<     }
< 
<     if ( strncasecmp( m_url, "http://", 7 ) == 0 )
<     {
<         m_url += 7;
<         m_url = strchr( m_url, '/' );
<     }
< 
<     if ( ! m_url || m_url[ 0 ] != '/' )
<     {
<         return BAD_REQUEST;
<     }
< 
<     m_check_state = CHECK_STATE_HEADER;
<     return NO_REQUEST;
< }
< 
< http_conn::HTTP_CODE http_conn::parse_headers( char* text )
< {
<     if( text[ 0 ] == '\0' )
<     {
<         if ( m_method == HEAD )
<         {
<             return GET_REQUEST;
<         }
< 
<         if ( m_content_length != 0 )
<         {
<             m_check_state = CHECK_STATE_CONTENT;
<             return NO_REQUEST;
<         }
< 
<         return GET_REQUEST;
<     }
<     else if ( strncasecmp( text, "Connection:", 11 ) == 0 )
<     {
<         text += 11;
<         text += strspn( text, " \t" );
<         if ( strcasecmp( text, "keep-alive" ) == 0 )
<         {
<             m_linger = true;
<         }
<     }
<     else if ( strncasecmp( text, "Content-Length:", 15 ) == 0 )
<     {
<         text += 15;
<         text += strspn( text, " \t" );
<         m_content_length = atol( text );
<     }
<     else if ( strncasecmp( text, "Host:", 5 ) == 0 )
<     {
<         text += 5;
<         text += strspn( text, " \t" );
<         m_host = text;
<     }
<     else
<     {
<         printf( "oop! unknow header %s\n", text );
<     }
< 
<     return NO_REQUEST;
< 
< }
< 
< http_conn::HTTP_CODE http_conn::parse_content( char* text )
< {
<     if ( m_read_idx >= ( m_content_length + m_checked_idx ) )
<     {
<         text[ m_content_length ] = '\0';
<         return GET_REQUEST;
<     }
< 
<     return NO_REQUEST;
---
> 	if (m_read_idx >= READ_BUFFER_SIZE)
> 	{
> 		return false;
> 	}
> 
> 	int bytes_read = 0;
> 	while (true)
> 	{
> 		bytes_read = recv(m_sockfd, m_read_buf + m_read_idx, READ_BUFFER_SIZE - m_read_idx, 0);
> 
> 		if (bytes_read == -1)
> 		{
> 			if (errno == EAGAIN || errno == EWOULDBLOCK)
> 			{
> 				break;
> 			}
> 			return false;
> 		}
> 		else if (bytes_read == 0)
> 		{
> 			return false;
> 		}
> 		m_read_idx += bytes_read;
> 	}
> 	return true;
> }
> 
> http_conn::HTTP_CODE http_conn::parse_request_line(char* text)
> {
> 	m_url = strpbrk(text, " \t");
> 	if (!m_url)
> 	{
> 		return BAD_REQUEST;
> 	}
> 
> 	*m_url ++ = '\0';
> 
> 	char* method = text;
> 	if (strcasecmp(method, "GET") == 0)
> 	{
> 		m_method = GET;
> 	}
> 	else
> 	{
> 		return BAD_REQUEST;
> 	}
> 
> 	m_url += strspn(m_url, " \t");
> 	m_version = strpbrk(m_url, " \t");
> 	
> 	if (!m_version)
> 	{
> 		return BAD_REQUEST;
> 	}
> 	
> 	*m_version++ = '\0';
> 	m_version += strspn (m_version, " \t");
> 	
> 	if (strcasecmp(m_version, "HTTP/1.1") != 0)
> 	{
> 		return BAD_REQUEST;
> 	}
> 	
> 	if (strncasecmp(m_url, "http://", 7) == 0)
> 	{
> 		m_url += 7;
> 		m_url = strchr (m_url, '/');
> 	}
> 
> 	if (!m_url || m_url[0] != '/')
> 	{
> 		return BAD_REQUEST;
> 	}
> 
> 	m_check_state = CHECK_STATE_HEADER;
> 	return NO_REQUEST;
> }
> 
> http_conn::HTTP_CODE http_conn::parse_headers(char* text)
> {
> 	if ('\0' == text[0])
> 	{
> 		if (0 != m_content_length)
> 		{
> 			m_check_state = CHECK_STATE_CONTENT;
> 			return NO_REQUEST;
> 		}
> 
> 		return GET_REQUEST;
> 	}
> 
> 	else if (0 == strncasecmp(text, "Connection:", 11))
> 	{
> 		text += 11;
> 		text += strspn(text, " \t");
> 		if (0 == strcasecmp(text, "keep-alive"))
> 		{
> 			m_linger = true;
> 		}
> 	}
> 
> 	else if (0 == strncasecmp(text, "Context-Length:", 15))
> 	{
> 		text += 15;
> 		text += strspn(text, " \t");
> 		m_content_length = atol(text);
> 	}
> 
> 	else if (0 == strncasecmp(text, "Host:", 5))
> 	{
> 		text += 5;
> 		text += strspn(text, " \t");
> 		m_host = text;
> 	}
> 
> 	else
> 	{
> 		printf("oop! unknow header %s\n", text);
> 	}
> 
> 	return NO_REQUEST;
> }
> 
> http_conn::HTTP_CODE http_conn::parse_content (char* text)
> {
> 	if (m_read_idx >= (m_content_length + m_checked_idx))
> 	{
> 		text[m_content_length] = '\0';
> 		return GET_REQUEST;
> 	}
> 	
> 	return NO_REQUEST;
269,321c267,320
<     LINE_STATUS line_status = LINE_OK;
<     HTTP_CODE ret = NO_REQUEST;
<     char* text = 0;
< 
<     while ( ( ( m_check_state == CHECK_STATE_CONTENT ) && ( line_status == LINE_OK  ) )
<                 || ( ( line_status = parse_line() ) == LINE_OK ) )
<     {
<         text = get_line();
<         m_start_line = m_checked_idx;
<         printf( "got 1 http line: %s\n", text );
< 
<         switch ( m_check_state )
<         {
<             case CHECK_STATE_REQUESTLINE:
<             {
<                 ret = parse_request_line( text );
<                 if ( ret == BAD_REQUEST )
<                 {
<                     return BAD_REQUEST;
<                 }
<                 break;
<             }
<             case CHECK_STATE_HEADER:
<             {
<                 ret = parse_headers( text );
<                 if ( ret == BAD_REQUEST )
<                 {
<                     return BAD_REQUEST;
<                 }
<                 else if ( ret == GET_REQUEST )
<                 {
<                     return do_request();
<                 }
<                 break;
<             }
<             case CHECK_STATE_CONTENT:
<             {
<                 ret = parse_content( text );
<                 if ( ret == GET_REQUEST )
<                 {
<                     return do_request();
<                 }
<                 line_status = LINE_OPEN;
<                 break;
<             }
<             default:
<             {
<                 return INTERNAL_ERROR;
<             }
<         }
<     }
< 
<     return NO_REQUEST;
---
> 	LINE_STATUS line_status = LINE_OK;
> 	HTTP_CODE ret = NO_REQUEST;
> 	char* text = 0;
> 	while (((m_check_state == CHECK_STATE_CONTENT) && (line_status == LINE_OK))
> 		||((line_status = parse_line()) == LINE_OK))
> 	{
> 		text = get_line();
> 		m_start_line = m_checked_idx;
> 		printf("got 1 http line: %s\n", text);
> 
> 		switch(m_check_state)
> 		{
> 			case CHECK_STATE_REQUESTLINE:
> 			{
> 				ret = parse_request_line(text);
> 				if(ret = BAD_REQUEST)
> 				{
> 					return BAD_REQUEST;
> 				}
> 				break;
> 			}
> 			
> 			case CHECK_STATE_HEADER:
> 			{
> 				ret = parse_headers(text);
> 				if (ret == BAD_REQUEST)
> 				{
> 					return BAD_REQUEST;
> 				}
> 				else if (ret = GET_REQUEST)
> 				{
> 					return do_request();
> 				}
> 				break;
> 			}
> 
> 			case CHECK_STATE_CONTENT:
> 			{
> 				ret = parse_content(text);
> 				if (ret == GET_REQUEST)
> 				{
> 					return do_request();
> 				}
> 				line_status = LINE_OPEN;
> 				break;
> 			}
> 
> 			default:
> 			{
> 				return INTERNAL_ERROR;
> 			}
> 		}
> 	}
> 	return NO_REQUEST;
326,347c325,348
<     strcpy( m_real_file, doc_root );
<     int len = strlen( doc_root );
<     strncpy( m_real_file + len, m_url, FILENAME_LEN - len - 1 );
<     if ( stat( m_real_file, &m_file_stat ) < 0 )
<     {
<         return NO_RESOURCE;
<     }
< 
<     if ( ! ( m_file_stat.st_mode & S_IROTH ) )
<     {
<         return FORBIDDEN_REQUEST;
<     }
< 
<     if ( S_ISDIR( m_file_stat.st_mode ) )
<     {
<         return BAD_REQUEST;
<     }
< 
<     int fd = open( m_real_file, O_RDONLY );
<     m_file_address = ( char* )mmap( 0, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, 0 );
<     close( fd );
<     return FILE_REQUEST;
---
> 	strcpy(m_real_file, doc_root);
> 	int len = strlen(doc_root);
> 	strncpy(m_real_file + len, m_url, FILENAME_LEN - len - 1);
> 
> 	if (stat (m_real_file, &m_file_stat) < 0)
> 	{
> 		return NO_RESOURCE;
> 	}
> 
> 	if (! (m_file_stat.st_mode & S_IROTH))
> 	{
> 		return FORBIDDEN_REQUEST;
> 	}
> 
> 	if (S_ISDIR(m_file_stat.st_mode))
> 	{
> 		return BAD_REQUEST;
> 	}
> 
> 	int fd = open(m_real_file, O_RDONLY);
> 	m_file_address = (char*)mmap(0, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
> 	close(fd);
> 	
> 	return FILE_REQUEST;
352,356c353,357
<     if( m_file_address )
<     {
<         munmap( m_file_address, m_file_stat.st_size );
<         m_file_address = 0;
<     }
---
> 	if (m_file_address)
> 	{
> 		munmap(m_file_address, m_file_stat.st_size);
> 		m_file_address = 0;
> 	}
361,432c362,436
<     int temp = 0;
<     int bytes_have_send = 0;
<     int bytes_to_send = m_write_idx;
<     if ( bytes_to_send == 0 )
<     {
<         modfd( m_epollfd, m_sockfd, EPOLLIN );
<         init();
<         return true;
<     }
< 
<     while( 1 )
<     {
<         temp = writev( m_sockfd, m_iv, m_iv_count );
<         if ( temp <= -1 )
<         {
<             if( errno == EAGAIN )
<             {
<                 modfd( m_epollfd, m_sockfd, EPOLLOUT );
<                 return true;
<             }
<             unmap();
<             return false;
<         }
< 
<         bytes_to_send -= temp;
<         bytes_have_send += temp;
<         if ( bytes_to_send <= bytes_have_send )
<         {
<             unmap();
<             if( m_linger )
<             {
<                 init();
<                 modfd( m_epollfd, m_sockfd, EPOLLIN );
<                 return true;
<             }
<             else
<             {
<                 modfd( m_epollfd, m_sockfd, EPOLLIN );
<                 return false;
<             } 
<         }
<     }
< }
< 
< bool http_conn::add_response( const char* format, ... )
< {
<     if( m_write_idx >= WRITE_BUFFER_SIZE )
<     {
<         return false;
<     }
<     va_list arg_list;
<     va_start( arg_list, format );
<     int len = vsnprintf( m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - 1 - m_write_idx, format, arg_list );
<     if( len >= ( WRITE_BUFFER_SIZE - 1 - m_write_idx ) )
<     {
<         return false;
<     }
<     m_write_idx += len;
<     va_end( arg_list );
<     return true;
< }
< 
< bool http_conn::add_status_line( int status, const char* title )
< {
<     return add_response( "%s %d %s\r\n", "HTTP/1.1", status, title );
< }
< 
< bool http_conn::add_headers( int content_len )
< {
<     add_content_length( content_len );
<     add_linger();
<     add_blank_line();
---
> 	int temp = 0;
> 	int bytes_have_send = 0;
> 	int bytes_to_send = m_write_idx;
> 	if (bytes_to_send == 0)
> 	{
> 		modfd (m_epollfd, m_sockfd, EPOLLIN);
> 		init();
> 		return true;
> 	}
> 
> 	while (1)
> 	{
> 		temp = writev (m_sockfd, m_iv, m_iv_count);
> 		if (temp <= -1)
> 		{
> 			if (errno == EAGAIN)
> 			{
> 				modfd (m_epollfd, m_sockfd, EPOLLOUT);
> 				return true;
> 			}
> 			unmap();
> 			return false;
> 		}
> 
> 		bytes_to_send -= temp;
> 		bytes_have_send += temp;
> 		if (bytes_to_send <= bytes_have_send)
> 		{
> 			unmap();
> 			if (m_linger)
> 			{
> 				init();
> 				modfd(m_epollfd, m_sockfd, EPOLLIN);
> 				return true;
> 			}
> 			else
> 			{
> 				modfd(m_epollfd, m_sockfd, EPOLLIN);
> 				return false;
> 			}
> 		}
> 	}
> }
> 
> bool http_conn::add_response(const char* format, ...)
> {
> 	if (m_write_idx >= WRITE_BUFFER_SIZE)
> 	{
> 		return false;
> 	}
> 
> 	va_list arg_list;
> 	va_start(arg_list, format);
> 	int len = vsnprintf(m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - 1 - m_write_idx,
> 				format, arg_list);
> 	if (len >= (WRITE_BUFFER_SIZE - 1 - m_write_idx))
> 	{
> 		return false;
> 	}
> 
> 	m_write_idx += len;
> 	va_end(arg_list);
> 	return true;
> }
> 
> bool http_conn::add_status_line(int status, const char* title)
> {
> 	return add_response("%s %d %s\r\n", "HTTP/1.1", status, title);
> }
> 
> bool http_conn::add_headers(int content_len)
> {
> 	add_content_length(content_len);
> 	add_linger();
> 	add_blank_line();
435c439
< bool http_conn::add_content_length( int content_len )
---
> bool http_conn::add_content_length(int content_len)
437c441
<     return add_response( "Content-Length: %d\r\n", content_len );
---
> 	return add_response("Content-Length: %d\r\n", content_len);
442c446
<     return add_response( "Connection: %s\r\n", ( m_linger == true ) ? "keep-alive" : "close" );
---
> 	return add_response("Connection: %s\r\n", (m_linger == true) ? "keep-alive" : "close");
447c451
<     return add_response( "%s", "\r\n" );
---
> 	return add_response("%s", "\r\n");
450c454
< bool http_conn::add_content( const char* content )
---
> bool http_conn::add_content(const char* content)
452c456
<     return add_response( "%s", content );
---
> 	return add_response("%s", content);
455,531c459,538
< bool http_conn::process_write( HTTP_CODE ret )
< {
<     switch ( ret )
<     {
<         case INTERNAL_ERROR:
<         {
<             add_status_line( 500, error_500_title );
<             add_headers( strlen( error_500_form ) );
<             if ( ! add_content( error_500_form ) )
<             {
<                 return false;
<             }
<             break;
<         }
<         case BAD_REQUEST:
<         {
<             add_status_line( 400, error_400_title );
<             add_headers( strlen( error_400_form ) );
<             if ( ! add_content( error_400_form ) )
<             {
<                 return false;
<             }
<             break;
<         }
<         case NO_RESOURCE:
<         {
<             add_status_line( 404, error_404_title );
<             add_headers( strlen( error_404_form ) );
<             if ( ! add_content( error_404_form ) )
<             {
<                 return false;
<             }
<             break;
<         }
<         case FORBIDDEN_REQUEST:
<         {
<             add_status_line( 403, error_403_title );
<             add_headers( strlen( error_403_form ) );
<             if ( ! add_content( error_403_form ) )
<             {
<                 return false;
<             }
<             break;
<         }
<         case FILE_REQUEST:
<         {
<             add_status_line( 200, ok_200_title );
<             if ( m_file_stat.st_size != 0 )
<             {
<                 add_headers( m_file_stat.st_size );
<                 m_iv[ 0 ].iov_base = m_write_buf;
<                 m_iv[ 0 ].iov_len = m_write_idx;
<                 m_iv[ 1 ].iov_base = m_file_address;
<                 m_iv[ 1 ].iov_len = m_file_stat.st_size;
<                 m_iv_count = 2;
<                 return true;
<             }
<             else
<             {
<                 const char* ok_string = "<html><body></body></html>";
<                 add_headers( strlen( ok_string ) );
<                 if ( ! add_content( ok_string ) )
<                 {
<                     return false;
<                 }
<             }
<         }
<         default:
<         {
<             return false;
<         }
<     }
< 
<     m_iv[ 0 ].iov_base = m_write_buf;
<     m_iv[ 0 ].iov_len = m_write_idx;
<     m_iv_count = 1;
<     return true;
---
> bool http_conn::process_write(HTTP_CODE ret)
> {
> 	switch(ret)
> 	{
> 		case INTERNAL_ERROR:
> 		{
> 			add_status_line(500, error_500_title);
> 			add_headers(strlen(error_500_form));
> 			if (!add_content(error_500_form))
> 			{
> 				return false;
> 			}
> 			break;
> 		}
> 		
> 		case BAD_REQUEST:
> 		{
> 			add_status_line(400, error_400_title);
> 			add_headers( strlen(error_400_form));
> 			if (!add_content(error_400_form))
> 			{
> 				return false;
> 			}
> 			break;
> 		}
> 		
> 		case NO_RESOURCE:
> 		{
> 			add_status_line(404, error_404_title);
> 			add_headers(strlen(error_404_form));
> 			if (! add_content(error_404_form))
> 			{
> 				return false;
> 			}
> 			break;
> 		}
> 
> 		case FORBIDDEN_REQUEST:
> 		{
> 			add_status_line(403, error_403_title);
> 			add_headers(strlen(error_403_form));
> 			if (! add_content(error_403_form))
> 			{
> 				return false;
> 			}
> 			break;
> 		}
> 
> 		case FILE_REQUEST:
> 		{
> 			add_status_line(200, ok_200_title);
> 			if (m_file_stat.st_size != 0)
> 			{
> 				add_headers(m_file_stat.st_size);
> 				m_iv[0].iov_base = m_write_buf;
> 				m_iv[0].iov_len = m_write_idx;
> 				m_iv[1].iov_base = m_file_address;
> 				m_iv[1].iov_len = m_file_stat.st_size;
> 				m_iv_count = 2;
> 				return true;
> 			}
> 			else
> 			{
> 				const char* ok_string = "<html><body></body></html>";
> 				add_headers(strlen(ok_string));
> 				if (! add_content(ok_string))
> 				{
> 					return false;
> 				}
> 			}
> 		}
> 		default:
> 		{
> 			return false;
> 		}
> 	}
> 	m_iv[0].iov_base = m_write_buf;
> 	m_iv[0].iov_len = m_write_idx;
> 	m_iv_count = 1;
> 	return true;
536,547c543,554
<     HTTP_CODE read_ret = process_read();
<     if ( read_ret == NO_REQUEST )
<     {
<         modfd( m_epollfd, m_sockfd, EPOLLIN );
<         return;
<     }
< 
<     bool write_ret = process_write( read_ret );
<     if ( ! write_ret )
<     {
<         close_conn();
<     }
---
> 	HTTP_CODE read_ret = process_read();
> 	if (read_ret == NO_REQUEST)
> 	{
> 		modfd (m_epollfd, m_sockfd, EPOLLIN);
> 		return;
> 	}
> 
> 	bool write_ret = process_write(read_ret);
> 	if (! write_ret)
> 	{
> 		close_conn();
> 	}
549c556
<     modfd( m_epollfd, m_sockfd, EPOLLOUT );
---
> 	modfd (m_epollfd, m_sockfd, EPOLLOUT);
551d557
< 
